/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.aws.greengrass.testing.mqtt.client";
option java_outer_classname = "ClientProto";


package ClientControl;

// Common part

message Empty {
}

// Logical Id of MQTT connection, unique for a agent, but not over
message MqttConnectionId {
    int32 connectionId = 1;
};

// MQTT 5.0 user's properties used in most of packets
message Mqtt5Properties {
    // TODO:
    int32 stub = 1;
};

// The MQTT v5.0 message
message Mqtt5Message {
    string topic = 1;
    bytes payload = 2;
    MqttQoS qos = 3;
    bool retain = 4;
    Mqtt5Properties properties = 5;
};

// End of common part

// Discovery part
/**
 * The discovery service definition.
 * Server implemented on OTF side, client on MQTT client side.
 */
service MqttAgentDiscovery {
    // Register MQTT client (agent)
    rpc RegisterAgent(RegisterRequest) returns (RegisterReply) {}

    // Discovery MQTT client address
    rpc DiscoveryAgent(DiscoveryRequest) returns (Empty) {}

    // Unregister MQTT client address
    rpc UnregisterAgent(UnregisterRequest) returns (Empty) {}

    // called when client receives MQTT message on subscription
    rpc OnReceiveMessage(OnReceiveMessageRequest) returns (Empty) {}

    // called when MQTT client lost connection (by request or from other party)
    rpc OnMqttDisconnect(OnMqttDisconnectRequest) returns (Empty) {}
}

// Request to register new agent, contains the agent id.
message RegisterRequest {
    string agentId = 1;
}

// Response to Register request contains address of agent's client as visible from OTF side
message RegisterReply {
    string address = 1;
}

// Request to register service address of agent, contains the agent's service address and port.
message DiscoveryRequest {
    string agentId = 1;
    string address = 2;
    int32 port = 3;
}

// Request to unregister agent, contains agent id and reason
message UnregisterRequest {
    string agentId = 1;
    string reason = 2;
}

// MQTT message received by agent
message OnReceiveMessageRequest {
    string agentId = 1;                                 // id of agent
    MqttConnectionId connectionId = 2;                  // id of connection which received the message
    Mqtt5Message msg = 3;                               // received MQTT message
}

// event of MQTT connection is disconnected
message OnMqttDisconnectRequest {
    string agentId = 1;                                 // if of agent
    MqttConnectionId connectionId = 2;                  // id of connection which disconnected
    optional Mqtt5Disconnect disconnect = 3;            // useful information from MQTT5 DISCONNECT packet
    string error = 4;                                   // OS level error string
}

// Useful information from MQTT5 DISCONNECT packet
message Mqtt5Disconnect {
    optional int32 reasonCode = 1;
    optional int32 sessionExpiryInterval = 2;
    optional string reasonString = 3;
    optional string serverReference = 4;
    optional Mqtt5Properties properties = 5;
}

// End of discovery part

// MQTT client contol part
/**
 * The MQTT control service definition.
 * Server implemented on MQTT client side, client on OTF side.
 */
service MqttClientControl {
    // request to terminate agent
    rpc ShutdownAgent(ShutdownRequest) returns (Empty) {}

    // create MQTT connection
    rpc CreateMqttConnection(MqttConnectRequest) returns (MqttConnectReply) {}

    // close MQTT connection
    rpc CloseMqttConnection(MqttCloseRequest) returns (Empty) {}

    // MQTT subscribe
    rpc SubscribeMqtt(MqttSubscribeRequest) returns (MqttSubscribeReply) {}

    // MQTT unsubscribe
    rpc UnsubscribeMqtt(MqttUnsubscribeRequest) returns (MqttSubscribeReply) {}

    // publish MQTT message
    rpc PublishMqtt(MqttPublishRequest) returns (MqttPublishReply) {}
}

// Versions of MQTT protocol, used for compatibility, only MQTT_PROTOCOL_V50 actually supported
enum MqttProtoVersion {
    MQTT_PROTOCOL_V_0    = 0;
    MQTT_PROTOCOL_V_31   = 3;           // unsupported
    MQTT_PROTOCOL_V_311  = 4;           // supported
    MQTT_PROTOCOL_V_50   = 5;           // supported
};

// MQTT QoS values
enum MqttQoS {
    MQTT_QOS_0 = 0;
    MQTT_QOS_1 = 1;
    MQTT_QOS_2 = 2;
};

// Retain handling values
enum Mqtt5RetainHandling {
    MQTT5_RETAIN_SEND_AT_SUBSCRIPTION = 0;
    MQTT5_RETAIN_SEND_AT_NEW_SUBSCRIPTION = 1;
    MQTT5_RETAIN_DO_NOT_SEND_AT_SUBSCRIPTION = 2;
    MQTT5_RETAIN_RESERVED = 4;
};

message Mqtt5ConnAck {
    optional bool sessionPresent = 1;
    optional int32 reasonCode = 2;
    optional int32 sessionExpiryInterval = 3;
    optional int32 receiveMaximum = 4;
    optional int32 maximumQoS = 5;
    optional bool retainAvailable = 6;
    optional int32 maximumPacketSize = 7;
    optional string assignedClientId = 8;
    optional string reasonString = 9;
    optional bool wildcardSubscriptionsAvailable = 10;
    optional bool subscriptionIdentifiersAvailable = 11;
    optional bool sharedSubscriptionsAvailable = 12;
    optional int32 serverKeepAlive = 13;
    optional string responseInformation = 14;
    optional string serverReference = 15;
    optional int32 topicAliasMaximum = 16;

    // TODO: Authentication Method
    // TODO: Authentication Data
    // TODO: user's Properties
};


// One item of subscription contains filter and options
message Mqtt5Subscription {
    string filter = 1;                                  // topic filter
    MqttQoS qos = 2;                                    // Maximum QoS field
    bool noLocal = 3;                                   // No Local option
    bool retainAsPublished = 4;                         // Retain As Published option
    Mqtt5RetainHandling retainHandling = 5;             // Retain Handling option
}

// Optional TLS settings for MQTT connection
message TLSSettings {
    repeated string caList = 1;                         // list of PEM formatted CA
    string cert = 2;                                    // MQTT client's certificate, PEM formatted
    string key = 3;                                     // MQTT client's private key
};

// Request to shutdown client has a reason field
message ShutdownRequest {
    string reason = 1;
}


// Request to create new MQTT connection with broker
message MqttConnectRequest {
    string clientId = 1;                                // MQTT id of client
    string host = 2;                                    // host of MQTT broker
    int32 port = 3;                                     // port of MQTT broker
    int32 keepalive = 4;                                // MQTT keep alive interval in seconds
    bool cleanSession = 5;                              // clean sesions (clean start) flag
    MqttProtoVersion protocolVersion = 6;               // version of MQTT protocol to use, currently only 5 is supported
    int32 timeout = 7;                                  // connect timeout in seconds
    optional Mqtt5Properties properties = 8;            // CONNECT packet MQTT 5 properties
    optional TLSSettings tls = 9;                       // TLS settings for secured connection
    optional Mqtt5Message willMessage = 10;             // will message to set
}

// Response to connect request
message MqttConnectReply {
    bool connected = 1;                                 // true when connection has been established
    MqttConnectionId connectionId = 2;                  // id of establisted connection
    optional Mqtt5ConnAck connAck = 3;                  // information from CONNACK packet
    optional string error = 4;                          // error string if available, has sense on connected = false
    // TODO: add user properties
}

// Request to close MQTT connection
message MqttCloseRequest {
    MqttConnectionId connectionId = 1;                  // id of connection to disconnect
    int32 timeout = 2;                                  // disconnect timeout in seconds
    int32 reason = 3;                                   // MQTT disconnect reason
    optional Mqtt5Properties properties = 4;            // DISCONNECT packet MQTT v5.0 properties
}

// Request to subscribe to MQTT topic(s)
message MqttSubscribeRequest {
    MqttConnectionId connectionId = 1;                  // id of connection to subscribe
    int32 timeout = 2;                                  // subscribe timeout in seconds
    optional int32 subscriptionId = 3;                  // optional subscription id
    repeated Mqtt5Subscription subscriptions = 4;       // list of filter with options
    // TODO: add user properties
}

// Response to subscribe request
message MqttSubscribeReply {
    repeated int32 reasonCodes = 1;                     // MQTT v5.0 SUBACK reason codes
    optional string reasonString = 2;                   // MQTT v5.0 SUBACK  reason string
    optional Mqtt5Properties properties = 3;            // MQTT v5.0 SUBACK user's properties
}

// Request to unsubscribe from MQTT topic(s)
message MqttUnsubscribeRequest {
    MqttConnectionId connectionId = 1;                  // id of connection to unsubscribe
    int32 timeout = 2;                                  // unsubscribe timeout in seconds
    repeated string filters = 3;                        // list of filter to unsubscribe
    // TODO: add user properties
}

// Request to publish MQTT message
message MqttPublishRequest {
    MqttConnectionId connectionId = 1;                  // id of connection to publish
    int32 timeout = 2;                                  // publish timeout in seconds
    Mqtt5Message msg = 3;
}

// Response to publish request
message MqttPublishReply {
    optional int32 reasonCode = 1;                      // MQTT v5.0 PUBACK reason code
    optional string reasonString = 2;                   // MQTT v5.0 PUBACK reason string
    optional Mqtt5Properties properties = 3;            // MQTT v5.0 PUBACK user's properties
}

// end of MQTT client contol part
